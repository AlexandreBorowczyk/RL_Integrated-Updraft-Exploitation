import gym
from gym import spaces
from gym.utils import seeding
import numpy as np
import scipy.integrate as integrate
import sys
import os

sys.path.append(os.path.join("..", "..", ".."))

from params_3D import *

class gliderEnv3D(gym.Env):

########################################################################################################################

    def __init__(self):

        # instantiate parameters
        self._params_glider = params_glider()
        self._params_physics = params_physics()
        self._params_task = params_task()
        self._params_sim = params_sim()

        # set integrator
        if self._params_sim.USE_RK45:
            self._integrator = integrate.ode(self.buildDynamic3D).set_integrator('dopri5')
        else:
            self._integrator = 'euler'

        # set random seed
        self.seed()

        # initialize further member variables
        self._V_bestGlide   = self.getBestGlide()
        self.state          = None
        self.time           = None
        self.control        = None
        self.activeVertex   = None
        self.viewer         = None

    def seed(self, seed=None):
        self.np_random, seed = seeding.np_random(seed)
        return [seed]

    def getBestGlide(self):
        alpha_bestGlide = ((self._params_glider.ST + 2)
                           * np.sqrt(self._params_glider.CD0*self._params_glider.OE/self._params_glider.ST))\
                           / (2*np.sqrt(np.pi))
        cL_bestGlide = (2*np.pi*alpha_bestGlide*self._params_glider.ST)/(self._params_glider.ST + 2)
        V_bestGlide = np.sqrt((2*self._params_glider.M*self._params_physics.G)
                              /(self._params_physics.RHO*self._params_glider.S*cL_bestGlide))
        return V_bestGlide

########################################################################################################################

    def reset(self):
        if self._params_task.INIT_METHOD == 'random_normal':
            initState = self.np_random.multivariate_normal(self._params_task.INITIAL_STATE,
                                                           np.diag(np.square(self._params_task.INITIAL_STD)))
        elif self._params_task.INIT_METHOD == 'fix':
            initState = np.copy(self._params_task.INITIAL_STATE)

        self.time = 0
        self.activeVertex = 1
        self.state = np.copy(initState)
        return self.state

########################################################################################################################

    def step(self, action, timestep=None):
        timestep = self._params_sim.TIMESTEP if not timestep else timestep

        self.control = self.action2control(action)
        self.integrate(timestep)
        observation = self.state2observation()
        reward, done = self.getRewardAndDoneFlag(timestep)
        self.setActiveVertex()
        info = self.getInfo()
        return observation, reward, done, info

########################################################################################################################

    def action2control(self, action):  # TODO: check that method (dim(a) = 2, now!)
        lb = np.min(self._params_task.ACTION_SPACE, 1)*(np.pi/180)
        ub = np.max(self._params_task.ACTION_SPACE, 1)*(np.pi/180)
        control = lb + (action + 1.) * 0.5 * (ub - lb)
        control = np.clip(control, lb, ub)
        return control

########################################################################################################################

    def integrate(self, timestep):
        if self._integrator == 'euler':
            x_dot = self.buildDynamic3D(self.time, self.state)
            for index in range(len(x_dot)):
                self.state[index] += float(timestep * x_dot[index])
            self.time += timestep
        else:
            r = self._integrator
            r.set_initial_value(self.state)
            r.integrate(timestep)
            self.time += r.t
            self.state = r.y
            
########################################################################################################################

    def buildDynamic3D(self, t, x, wind=np.array([[0], [0], [0]])):
        # control variables assignment
        mu_a = self.control.item(0)
        # alpha = self.action.item(1)
        alpha = np.deg2rad(4)

        # track speed in local NED coordinates
        g_v_K = x[3:6].reshape(3, 1)

        # airspeed in local NED coordinates
        g_v_A = g_v_K - wind

        # air-path angles
        v_A_norm = np.linalg.norm(g_v_A)
        gamma_a = -np.arcsin(g_v_A[2]/v_A_norm)
        chi_a = np.arctan2(g_v_A[1], g_v_A[0])
        
        # aerodynamic force in aerodynamic coordinates
        cl = 2*np.pi*(self._params_glider.ST/(self._params_glider.ST + 2))*alpha
        cd = self._params_glider.CD0 + (1/(np.pi*self._params_glider.ST*self._params_glider.OE))*np.power(cl, 2)
        a_f_A = (self._params_physics.RHO/2)*self._params_glider.S*np.power(v_A_norm, 2)*np.array([[-cd], [0], [-cl]])

        # aerodynamic force in local NED coordinates
        g_T_a = self.getRotationMatrix(-chi_a, 3)\
                @ self.getRotationMatrix(-gamma_a, 2)\
                @ self.getRotationMatrix(-mu_a, 1)
        g_f_A = g_T_a @ a_f_A

        # track acceleration in local NED coordinates
        g_a_K = (g_f_A/self._params_glider.M) + np.array([[0], [0], [self._params_physics.G]])

        # state derivative  # TODO: check dimension (-> 6 x 1!?)
        xp = np.append(g_v_K, g_a_K)

        return xp

    def getRotationMatrix(self, angle, axis):
        if axis == 1:
            rotationMatrix = np.array([[1, 0, 0],
                                       [0, np.cos(angle), np.sin(angle)],
                                       [0, -np.sin(angle), np.cos(angle)]])
        elif axis == 2:
            rotationMatrix = np.array([[np.cos(angle), 0, -np.sin(angle)],
                                       [0, 1, 0],
                                       [np.sin(angle), 0, np.cos(angle)]])
        elif axis == 3:
            rotationMatrix = np.array([[np.cos(angle), np.sin(angle), 0],
                                       [-np.sin(angle), np.cos(angle), 0],
                                       [0, 0, 1]])
        else:
            print("not a valid rotation axis")
        return rotationMatrix
       
########################################################################################################################

    def state2observation(self):  # TODO: check that method

        # get horizontal aircraft position in active-sector-coordinates
        sec_T_g = self.getTrafo()
        sec_p_H = sec_T_g @ (self.state[0:2].reshape(2, 1)
                             - self._params_task.TRIANGLE[:, (self.activeVertex - 1)].reshape(2, 1))

        # relative position in cylindrical coordinates (wrt. active-sector-axes): p_dist, p_chi, -height
        cyl_p_sec = np.array([np.linalg.norm(sec_p_H),
                              np.arctan2(sec_p_H[1], sec_p_H[0]).item(),
                              self.state[2]])

        # get horizontal aircraft track speed in active-sector-coordinates
        sec_v_H = sec_T_g @ self.state[3:5].reshape(2, 1)

        # track speed in cylindrical coordinates (wrt. active-sector-axes): v_norm, v_chi, v_down
        cyl_v_sec = np.array([np.linalg.norm(sec_v_H),
                              np.arctan2(sec_v_H[1], sec_v_H[0]).item(),
                              self.state[5]])

        # stack observation (t, p_dist, p_chi, -height, v_norm, v_chi, v_down) and normalize
        observation = (np.append(self.time, np.append(cyl_p_sec, cyl_v_sec)) - self._params_task.OBS_MEAN) \
                      / self._params_task.OBS_STD

        return observation

########################################################################################################################

    def getRewardAndDoneFlag(self, timestep):
        # x, y, z, vx, vy, vz = self.state

        # compute approaching distance towards active vertex
        g_dir = self._params_task.TRIANGLE[:, (self.activeVertex - 1)].reshape(2, 1) - self.state[0:2].reshape(2, 1)
        g_v_h = self.state[3:5].reshape(2, 1)
        approach = float(np.dot(np.transpose(g_v_h), (g_dir/np.linalg.norm(g_dir))))*timestep

        if self._params_task.TASK == 'distance':
            reward = approach  # TODO: only covering distance is rewarded so far (WP-type control)
        elif self._params_task.TASK == 'speed':
            # TBD
            print("task not implemented, yet")
        else:
            print("no such task")

        ground      = (-self.state[2] <= 0)
        timeout     = (self.time >= self._params_task.WORKING_TIME)
        # outofsight  = (np.linalg.norm(self.state[0:2]) > self._params_task.DISTANCE_MAX)
        outofsight = False
            
        done = (ground or timeout or outofsight)  # TODO: no final reward, at the moment

        return reward, done

    def setActiveVertex(self):  # TODO: Check that method
        # x, y, z, vx, vy, vz = self.state

        # get horizontal aircraft position in active-sector-coordinates
        sec_T_g = self.getTrafo()
        sec_pos_ac = sec_T_g @ (self.state[0:2].reshape(2, 1)
                                - self._params_task.TRIANGLE[:, (self.activeVertex - 1)].reshape(2, 1))

        # update active vertex if both active-sector-coordinates are positive
        if (sec_pos_ac >= 0).all():
            # print("hit active vertex no. {}" .format(self.activeVertex))
            if (self.activeVertex + 1) > 3:
                self.activeVertex = 1
            else:
                self.activeVertex += 1

    def getTrafo(self):

        if self.activeVertex == 1:
            # rotation matrix from geodetic to sector-one-coordinates
            sec_T_g = (self._params_task.ONE_T_T @ np.transpose(self._params_task.G_T_T))
        elif self.activeVertex == 2:
            # rotation matrix from geodetic to sector-two-coordinates
            sec_T_g = (self._params_task.TWO_T_T @ np.transpose(self._params_task.G_T_T))
        elif self.activeVertex == 3:
            # rotation matrix from geodetic to sector-three-coordinates
            sec_T_g = (self._params_task.THREE_T_T @ np.transpose(self._params_task.G_T_T))
        else:
            sec_T_g = None
            print("active vertex no. {} is not a valid triangle vertex".format(self.activeVertex))

        return sec_T_g

#########################################################################################################

    def getInfo(self):
        x = self.state
        info = {"t": self.time, "x": x[0], "y": x[1], "z": x[2], "u": x[3], "v": x[4], "w": x[5]}
        return info

    def close(self):
        if self.viewer:
            self.viewer.close()
            self.viewer = None