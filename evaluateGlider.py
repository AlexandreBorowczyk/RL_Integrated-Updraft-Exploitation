import gym
import glider
import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import matplotlib.pyplot as plt

# TODO: via class definition import -> https://stackoverflow.com/questions/27732354/unable-to-load-files-using-pickle-and-multiple-modules
class PPO(nn.Module):
    def __init__(self):
        super(PPO, self).__init__()
        self.data = []

        self.inputLayer = nn.Linear(4, 64)
        self.hiddenLayer = nn.Linear(64, 64)
        self.outputLayer_pi = nn.Linear(64, 1)
        self.outputLayer_v = nn.Linear(64, 1)
        self.optimizer = optim.Adam(self.parameters(), lr=learning_rate)

    def pi(self, x):
        x = torch.tanh(self.inputLayer(x))
        x = torch.tanh(self.hiddenLayer(x))
        prob = torch.tanh(self.outputLayer_pi(x))
        return prob

    def v(self, x):
        x = torch.tanh(self.inputLayer(x))
        x = torch.tanh(self.hiddenLayer(x))
        v = self.outputLayer_v(x)
        return v

    def put_data(self, transition):
        self.data.append(transition)

    def make_batch(self):
        s_lst, a_lst, r_lst, s_prime_lst, mu_a_lst, done_lst = [], [], [], [], [], []
        for transition in self.data:
            s, a, r, s_prime, mu_a, done = transition

            s_lst.append(s)
            a_lst.append([a])
            r_lst.append([r])
            s_prime_lst.append(s_prime)
            mu_a_lst.append([mu_a])
            done_mask = 0 if done else 1
            done_lst.append([done_mask])

        s, a, r, s_prime, done_mask, mu_a = torch.tensor(s_lst, dtype=torch.float), torch.tensor(a_lst), \
                                            torch.tensor(r_lst), torch.tensor(s_prime_lst, dtype=torch.float), \
                                            torch.tensor(done_lst, dtype=torch.float), torch.tensor(mu_a_lst)
        self.data = []
        return s, a, r, s_prime, done_mask, mu_a

    def train_net(self):
        s, a, r, s_prime, done_mask, mu_a = self.make_batch()

        for i in range(K_epoch):
            td_target = r + gamma * self.v(s_prime) * done_mask
            delta = td_target - self.v(s)
            delta = delta.detach().numpy()

            advantage_lst = []
            advantage = 0.0
            for delta_t in delta[::-1]:
                advantage = gamma * lmbda * advantage + delta_t[0]
                advantage_lst.append([advantage])
            advantage_lst.reverse()
            advantage = torch.tensor(advantage_lst, dtype=torch.float)

            mu = self.pi(s)
            var = torch.pow(torch.tensor(np.pi / 180), 2).double()  # constantly one deg std-dev for exploration
            pi_a = torch.exp(-torch.pow(a - mu, 2) / (2 * var))
            pi_old = torch.exp(-torch.pow(a - mu_a, 2) / (2 * var))
            ratio = torch.exp(torch.log(pi_a) - torch.log(pi_old))  # a/b == exp(log(a)-log(b))

            surr1 = ratio * advantage
            surr2 = torch.clamp(ratio, 1 - eps_clip, 1 + eps_clip) * advantage
            loss = -torch.min(surr1, surr2) + F.smooth_l1_loss(self.v(s), td_target.detach())

            self.optimizer.zero_grad()
            loss.mean().backward()
            self.optimizer.step()

env = gym.make('glider-v0')
model = torch.load("actor_critic_network_31-July-2019_16-21.pt")
model.eval()

for i_episode in range(1):
    state = env.reset()
    observation = env.standardize_observations(state)
    done = False
    time = 0
    pos_array = np.array([state[0], -state[1]]).reshape(1, 2)

    while not done:
        print(state)
        # action = 12*(np.pi/180)
        # action = (action - env.action_space.low)/(0.5*(env.action_space.high - env.action_space.low)) - 1.
        action = model.pi(torch.from_numpy(observation).float())
        observation, reward, done, info = env.step(action.data[0].numpy())
        state = observation * env._obs_std + env._obs_mean
        pos_array = np.append(pos_array, np.reshape(np.array([state[0], -state[1]]), (1, 2)), axis=0)
        time += env.action_dt

    print("Episode finished after {} seconds".format(time+1))
    plt.plot(pos_array[:, 0], pos_array[:, 1])
    # plt.xlim(0, env.distance)
    # plt.ylim(0, 100)
    # plt.axis('equal')
    plt.show()
    break

env.close()